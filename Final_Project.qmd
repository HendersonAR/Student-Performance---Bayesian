---
title: "STAT440 - Project"
format: pdf
editor: visual
---

```{r}
library(tidyverse)
library(janitor)
library(rstan)
library(rstanarm)
library(bayesplot)
library(MCMCpack)
student_data <- read.csv("Students_Grading_Dataset_Biased.csv"); 
head(student_data)
```

```{r}
student_lmer <- stan_lmer(Total_Score ~ Sleep_Hours_per_Night + (1 | Student_ID), 
 data = student_data)
```

```{r}
summary(student_lmer, digits = 3)
```

```{r}
lm(Total_Score ~ Sleep_Hours_per_Night + Study_Hours_per_Week, data = student_data)
```

```{r}
set.seed(12344)
library(MCMCpack)
# Gibbs
data <- read.csv("Students_Grading_Dataset_Biased.csv")
  x1 <- data$Sleep_Hours_per_Night
  x2 <- data$Study_Hours_per_Week
  y <- data$Total_Score
#design matrix
  z <- model.matrix(~as.factor(Student_ID)-1, data=data)

gibbs <- function(y,x1,x2,z,a,b,a_kappa,b_kappa,mu0,tau2,S) {
 
  n <- length(y)
  
  X <-cbind(1,x1,x2,z)
  
  p <-ncol(X)
  
  
  
  # hyperparameters
  
  #fixed tau for the first 3 something
  tau2 <- 100^2
  beta <- rep(0,p)
  kappa2 <- 1
  
  a <- b <- 1 
  a_kappa <- b_kappa <- 1
  mu0 <- 0
  
  #draws
  S <- 10
  
  #place to store data
  posterior_beta <- matrix(NA,S,p)
  posterior_sig2 <- rep(NA,S)
  posterior_kappa2 <- rep(NA, S)
  
  
  #starting values
  beta <- rep(0,p)
  sig2 <- 1

  # some useful quantities
  # Do them here to avoid computing this S times
  XX <- t(X)%*%X
  Xy <- t(X)%*%y
  
  for(s in 1:S){
    # update beta0
    prior_cov <- diag(c(rep(1/tau2,3),rep(1/kappa2,p-3)))
    v <- solve(XX/sig2 + prior_cov)
    m <- v %*% (Xy/sig2 + mu0*diag(prior_cov))
    beta <- m + t(chol(v)) %*% rnorm(p)
    #update sig2
    sig2 <- rinvgamma(1, a + n/2,
                      b + t(y-X%*%beta)%*%(y-X%*%beta)/2)
    #update kappa
    kappa2 <- rinvgamma(1, a_kappa + (p-3)/2, 
                        b_kappa +0.5* sum((beta[-c(1:3)])^2))
    
    #store results
    posterior_beta[s,] <- beta
    posterior_sig2[s] <- sig2
    posterior_kappa2[s] <- kappa2
    
  }
  return(cbind(posterior_beta, posterior_sig2, posterior_kappa2))
}
post_samples <- gibbs(y,x1,x2,z,a,b,a_kappa,b_kappa,mu0,tau2,S);
```

```{r}
set.seed(222)
num_beta <- ncol(post_samples) - 2 
post_samples_burnin <- post_samples[-c(1:5), ]  

results <- data.frame(
  mean = colMeans(post_samples_burnin),
  sd = apply(post_samples_burnin, 2, sd),
  lower = apply(post_samples_burnin, 2, quantile, 0.025),
  upper = apply(post_samples_burnin, 2, quantile, 0.975)
)
row.names(results) <- c(paste0("beta_", 0:(num_beta - 1)), "kappa2", "sigma")

head(results)  
tail(results)
```

```{r}

set.seed(12344)
library(MCMCpack)
# Gibbs
data <- read.csv("Students_Grading_Dataset_Biased.csv")
  x1 <- student_data$Study_Hours_per_Week
  x2 <- student_data$Sleep_Hours_per_Night
  x3 <- student_data$Stress_Level..1.10.
  y <- data$Total_Score
#design matrix
  z <- model.matrix(~as.factor(Student_ID)-1, data=data)

gibbs <- function(y,x1,x2, x3,z,a,b,a_kappa,b_kappa,mu0,tau2,S) {
 
  n <- length(y)
  
  X <-cbind(1,x1,x2, x3,z)
  
  p <-ncol(X)
  
  
  
  # hyperparameters
  
  #fixed tau for the first 3 something
  tau2 <- 100^2
  beta <- rep(0,p)
  kappa2 <- 1
  
  a <- b <- 1 
  a_kappa <- b_kappa <- 1
  mu0 <- 0
  
  #draws
  S <- 10
  
  #place to store data
  posterior_beta <- matrix(NA,S,p)
  posterior_sig2 <- rep(NA,S)
  posterior_kappa2 <- rep(NA, S)
  
  
  #starting values
  beta <- rep(0,p)
  sig2 <- 1

  # some useful quantities
  # Do them here to avoid computing this S times
  XX <- t(X)%*%X
  Xy <- t(X)%*%y
  
  for(s in 1:S){
    # update beta0
    prior_cov <- diag(c(rep(1/tau2,3),rep(1/kappa2,p-3)))
    v <- solve(XX/sig2 + prior_cov)
    m <- v %*% (Xy/sig2 + mu0*diag(prior_cov))
    beta <- m + t(chol(v)) %*% rnorm(p)
    #update sig2
    sig2 <- rinvgamma(1, a + n/2,
                      b + t(y-X%*%beta)%*%(y-X%*%beta)/2)
    #update kappa
    kappa2 <- rinvgamma(1, a_kappa + (p-3)/2, 
                        b_kappa +0.5* sum((beta[-c(1:3)])^2))
    
    #store results
    posterior_beta[s,] <- beta
    posterior_sig2[s] <- sig2
    posterior_kappa2[s] <- kappa2
    
  }
  return(cbind(posterior_beta, posterior_sig2, posterior_kappa2))
}
post_samples <- gibbs(y,x1,x2, x3,z,a,b,a_kappa,b_kappa,mu0,tau2,S);

```

```{r}
set.seed(222)
num_beta <- ncol(post_samples) - 2 
post_samples_burnin <- post_samples[-c(1:5), ]  

results <- data.frame(
  mean = colMeans(post_samples_burnin),
  sd = apply(post_samples_burnin, 2, sd),
  lower = apply(post_samples_burnin, 2, quantile, 0.025),
  upper = apply(post_samples_burnin, 2, quantile, 0.975)
)
row.names(results) <- c(paste0("beta_", 0:(num_beta - 1)), "kappa2", "sigma")

head(results)  
tail(results)
```

```{r}
lm(Total_Score ~ Sleep_Hours_per_Night + Study_Hours_per_Week + Stress_Level..1.10., data = student_data)
```
