---
title: "Final Poster Code"
author: "Group I"
format: html
---

**PLEASE PULL OUR PROJECT REPOSITORY TO REPRODUCE**

https://github.com/HendersonAR/Student-Performance---Bayesian.git

## Preliminary Installs / Notes

```{r, message=FALSE}
#install.packages("reticulate") #Used to run python scripts uncomment if you need it
library(reticulate)
library(tidyverse)
library(janitor)
library(rstan)
library(rstanarm)
library(bayesplot)
library(MCMCpack)
library(lme4)


# Install python libraries for python section (EDA)
reticulate::py_install("pandas", pip = TRUE) 
reticulate::py_install("matplotlib", pip = TRUE)
reticulate::py_install("seaborn", pip = TRUE)


# Setting variables for R section
student_data <- read.csv("Data/student-scores.csv"); 
clean_data <- read.csv("Data/student-scores-clean.csv")
```

# Python

## Exploratory Data Analysis Code

```{python}

# Imports python librarys, should've been installed earlier
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("darkgrid")
import os
output_dir = "img"
os.makedirs(output_dir, exist_ok=True)
```

```{python}

file_path = 'Data/student-scores.csv'
df = pd.read_csv(file_path)

df['part_time_job'] = df['part_time_job'].astype(int)
df['extracurricular_activities'] = df['extracurricular_activities'].astype(int)
df['gender'] = df['gender'].replace({'male': 1, 'female': 0})
df['career_aspiration'] = df['career_aspiration'].astype('category')
df['average_score'] = round((df['math_score'] + df['history_score'] +
                       df['physics_score'] + df['chemistry_score'] +
                       df['biology_score'] + df['english_score'] +
                       df['geography_score'])/7,2)
```

```{python}
file_path = 'Data/student-scores-clean.csv'
df = df.drop(['id','career_aspiration','first_name','last_name','email','career_aspiration',
              'math_score','history_score','history_score','chemistry_score','biology_score',
              'english_score','geography_score'],axis = 1)
df.to_csv(file_path, index=False)
```

```{python}

# For loop that generates images seen under EDA on Final Poster
for column in df.columns:
  unique_vals = df[column].unique()
  num_bins = len(unique_vals) if len(unique_vals) < 20 else 20
  plt.figure(figsize=(8, 6))
  plt.hist(df[column], bins=num_bins, edgecolor='black')
  plt.title(f'Histogram of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.savefig(f'img/{column}_historgram.png')
  plt.show()
  
```

# R

## Model Outline

$$
\begin{aligned}
Y_i \mid \boldsymbol\beta,\,\sigma^2 
  &\sim \mathcal{N}\bigl(\beta_0 + \beta_1 x_{1i}+\beta_2 x_{2i}+\beta_3 x_{3i}+\beta_4 x_{4i},\,\sigma^2\bigr)
  \\[3pt]
\beta_j &\sim \mathcal{N}(0,\,10{,}000^2),\quad j=0,\dots,4
  \\[3pt]
\sigma^2 &\sim \mathrm{Inv\!Gamma}(1,\,1)
\end{aligned}
$$

## Block Sampler Code (R)

```{r, cache=T, message=FALSE}
set.seed(8451)

y <- clean_data$average_score
x1 <- clean_data$part_time_job
x2 <- clean_data$absence_days
x3 <- clean_data$extracurricular_activities
x4 <- clean_data$weekly_self_study_hours


# Design matrix 
X <- cbind(1, x1, x2, x3, x4)
n <- length(y)
p <- ncol(X)

# Hyperparameters
tau2 <- 10000^2
a <- b <- 1
mu0 <- rep(0, p)  

S <- 2.5e4

# Empty matrix creation for results
posterior_beta <- matrix(NA, S, p)
posterior_sig2 <- rep(NA, S)

beta <- rep(0, p)
sig2 <- 1

XX <- t(X) %*% X
Xy <- t(X) %*% y

# Block Gibbs Sampler Loop
for (s in 1:S) {
  
  # Update beta0
  v <- solve(XX / sig2 + diag(rep(1/tau2, p)))  
  m <- v %*% (Xy / sig2 + mu0 / tau2) 
  beta <- m + t(chol(v)) %*% rnorm(p)  
  
  # Update sigma2
  sig2 <- rinvgamma(1, a + n/2, 
                    b + t(y - X %*% beta)%*%(y-X%*%beta) / 2)
  
  # Store results
  posterior_beta[s, ] <- beta
  posterior_sig2[s] <- sig2
}

posterior2 <- cbind(posterior_beta, posterior_sig2)
colnames(posterior2) <- c("beta0", "beta1", "beta2", 
                          "beta3", "beta4", "sigma")

# Burn-in Removal 
posterior2_burnin <- posterior2[1:round(s/2),]

head(posterior2_burnin)
```

### Trace plots for Block Gibbs

```{r}
par(mfrow=c(1,3))
plot(posterior2_burnin[,1], type="l", las=1, main="beta0")
plot(posterior2_burnin[,2], type="l", las=1, main="beta1")
plot(posterior2_burnin[,3], type="l", las=1, main="beta2")
plot(posterior2_burnin[,4], type="l", las=1, main="beta3")
plot(posterior2_burnin[,5], type="l", las=1, main="beta4")
plot(posterior2_burnin[,6], type="l", las=1, main="sig2")
```

## ?RStanarm Model Code (R)

```{r,message=FALSE, cache=TRUE}
# fit model in rstanarm
grades_lmer <- stan_lmer(average_score ~ part_time_job + 
                           absence_days + extracurricular_activities + 
                           weekly_self_study_hours + (1|gender), 
                       data = clean_data,
                    )


```

### RStanarm Results (R)

```{r, message=FALSE}
summary(grades_lmer, digits = 3)
pp_check(grades_lmer)
```
